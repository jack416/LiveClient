//
//  LiveChatCamshareManager.h
//  Common-C-Library
//
//  Created by Max on 2017/2/23.
//  Copyright © 2017年 qpidnetwork. All rights reserved.
//

#ifndef LiveChatCamshareManager_h
#define LiveChatCamshareManager_h

#include <stdio.h>

#include "ILiveChatManManager.h"
#include "ILiveChatManManagerOperator.h"
#include "LiveChatSender.h"

#include "LCTextManager.h"
#include "LCEmotionManager.h"
#include "LCVoiceManager.h"
#include "LCPhotoManager.h"
#include "LCVideoManager.h"
#include "LCMagicIconManager.h"

#include "LCUserItem.h"
#include "LCUserManager.h"
#include "LCInviteManager.h"
#include "LCBlockManager.h"
#include "LCContactManager.h"

#include <manrequesthandler/RequestLiveChatController.h>
#include <manrequesthandler/RequestOtherController.h>

#include "LiveChatSender.h"
#include "Session.h"

#include <livechat/LSLiveChatCounter.h>

using namespace session;

typedef map<string, Session*> SessionMap;

class RequestItem;
class LiveChatCamshareManager : public ILiveChatManManagerTaskCallback
                                , public ILiveChatClientListener
                                , public IRequestLiveChatControllerCallback
                                , public IRequestOtherControllerCallback
{
public:
    LiveChatCamshareManager(
                           ILiveChatManManagerOperator* pOperator,
                           ILiveChatManManagerListener* pListener,
                           ILiveChatClient*	pClient,
                           LiveChatSender* pLiveChatSender,
                           LCUserManager* pUserMgr,
                           LCBlockManager* pBlockManager,
                           HttpRequestManager* pHttpRequestManager
                           );
    
    ~LiveChatCamshareManager();
   
public:
    // 重置参数
    void Reset();
    
    // 开始任务
    void Start();
    
    // 发送消息
    bool SendMsg(LCUserItem* userItem, LCMessageItem* msgItem);
        
    // 发送Camshare邀请/应邀
    bool SendCamShareInvite(LCUserItem* userItem);
    // 结束会话
    bool EndTalk(LCUserItem* userItem);
    // 获取Camshare女士状态
    bool GetCamLadyStatus(LCUserItem* userItem);
    // 检查Camshare试聊券
    bool CheckCamCoupon(LCUserItem* userItem);
    // 更新收到视频流时间
    bool UpdateRecvVideo(LCUserItem* userItem);
    // 是否Camshare会话中
    bool IsCamShareInChat(LCUserItem* userItem);
    // 是否需要上传视频
    bool IsUploadVideo();
    // 是否Camshare的被邀请
    bool IsCamShareInvite(LCUserItem* userItem);
    // 设置Camshare前后台
    bool SetCamShareBackground(LCUserItem* userItem, bool bBackground);
    // 设置Camshare心跳超时步长
    bool SetCheckCamShareHeartBeatTimeStep(int timeStep);
    // 设置camshare最少点数
    void SetMinCamshareBalance(double balance);
    // 获取在聊列表
    void OnGetTalkList(const TalkListInfo& talkListInfo);
    // 收到女士Camshare邀请
    void OnRecvInviteMessage(const string& toId, const string& fromId, const string& inviteId, INVITE_TYPE inviteType);
    
    
private:
    // 是否能发送邀请
    bool CanSendInvite(LCUserItem* userItem);
    // 是否立即发送消息给用户
    bool IsSendMessageNow(LCUserItem* userItem);
    
    // 检查试聊券
    bool CheckCoupon(Session* session);
    bool CheckInsideCoupon(Session* session);
    void OnCheckCoupon(long requestId, bool success, const Coupon& item, const string& userId, const string& errnum, const string& errmsg) override;
    
    // 试聊券请求处理函数
    bool UseCoupon(Session* session);
    void OnUseCoupon(long requestId, bool success, const string& errnum, const string& errmsg, const string& userId, const string& couponid) override;
    void OnCamshareUseTryTicket(LCC_ERR_TYPE err, const string& errmsg, const string& userId, const string& ticketId, const string& inviteId) override;
    
    // 检查用户信息
    bool GetCount(Session* session);
    void OnGetCount(long requestId, bool success, const string& errnum, const string& errmsg, const OtherGetCountItem& item) override;
    // 获取camshare最少点数
    double GetMinCamshareBalance();
    
    // 根据状态判断发送邀请还是应邀
    bool SendCamShareInviteByStatus(Session* session);
    
    // 直接发送邀请
    bool SendCamShareInviteCmd(Session* session);
    void OnSendCamShareInvite(const string& inUserId, LCC_ERR_TYPE err, const string& errmsg) override;
    
    // 发送取消邀请
    bool SendCamShareCancelInviteCmd(Session* session);
    // 发送结束会话
    bool SendEndTalkCmd(Session* session);
    // 结束会话
    void OnEndTalk(const string& inUserId, LCC_ERR_TYPE err, const string& errmsg) override;
    
    // 直接发送应答
    bool SendCamShareApplyCmd(Session* session);
    void OnApplyCamShare(const string& inUserId, LCC_ERR_TYPE err, const string& errmsg, bool isSuccess, const string& targetId) override;
    
    // 收到女士应邀
    void OnRecvAcceptCamInvite(const string& fromId, const string& toId, CamshareLadyInviteType inviteType, int sessionId, const string& fromName, bool isCamOpen) override;
    
    // 发送会话心跳
    bool SendCamShareHeartBeat(Session* session);
    void OnRecvCamHearbeatException(const string& exceptionName, LCC_ERR_TYPE err, const string& targetId) override;

    // 收到女士Camshare状态改变
    void OnRecvLadyCamStatus(const string& userId, USER_STATUS_PROTOCOL statusId, const string& server, CLIENT_TYPE clientType, CamshareLadySoundType sound, const string& version) override;
    
    // 邀请或者开启服务错误检测处理
    void ErrorCheck(const string& userId, LCC_ERR_TYPE err = LCC_ERR_FAIL);
    bool ErrorCheckLadyOnline(Session* session);
    void OnGetUserInfo(int seq, const string& inUserId, LCC_ERR_TYPE err, const string& errmsg, const UserInfoItem& userInfo) override;
    bool ErrorCheckLadyCam(Session* session);
    // 获取女士Camshare状态回调
    void OnGetLadyCamStatus(int seq, const string& inUserId, LCC_ERR_TYPE err, const string& errmsg, bool isOpenCam) override;
    
    // 根据用户Id获取会话
    Session* GetSessionByUserItem(LCUserItem* userItem);
    Session* CreateSessionByUserItem(LCUserItem* userItem);
    void RemoveSessionByUserItem(LCUserItem* userItem);
    
    // 创建在聊的Camshare会话
    bool CreateCamShareInChatSession(LCUserItem* userItem);
    
    // 内部检查女士cam是否开启
    bool InsideGetLadyCamStatu(Session* session);
    // 处理内部检查女士cam
    bool HandleCamshareCheckCoupon(Session* session, LCC_ERR_TYPE err, bool isOpenCam);
    
    // -------------------------- 任务分发 --------------------------
    // 定时任务处理
    void OnLiveChatManManagerTaskRun(TaskParam param) override;
    void OnLiveChatManManagerTaskClose(TaskParam param) override;
    // 定时业务处理器
    void RequestHandler(RequestItem* item);
    // -------------------------- 任务分发 End --------------------------
    
    // -------------------------- 消息处理器 --------------------------
    // 发送所有会话心跳
    void SendAllSessionHeartBeat();
    // 检查所有会话视频超时
    void CheckAllSessionVideoTimeout();
    // 检查所有会话邀请超时
    void CheckAllSessionInviteTimeout();
    // 检查所有会话后台超时
    void CheckAllSessionBackgroundTimeout();
    // -------------------------- 消息处理器 End --------------------------
    
    // 公共信息获取
    ILiveChatManManagerOperator* m_operator;
    // 回调
    ILiveChatManManagerListener* m_listener;
    // LiveChat客户端
    ILiveChatClient* m_client;
    // 消息发送器
    LiveChatSender* m_liveChatSender;
    
    // 用户管理器
    LCUserManager*		m_userMgr;		// 用户管理器
    LCBlockManager*     m_blockMgr;     // 黑名单管理器
    
    // LiveChat请求控制器
    RequestLiveChatController* m_requestController;
    // Other请求控制器
    RequestOtherController*	m_requestOtherController;
    
    // 检测试聊请求map表
    map_lock<long, Session*> m_inviteMsgMap;
    
    // 邀请会话自增Id管理
    LSLiveChatCounter m_counter;
    
    // 会话列表
    IAutoLock* m_sessionMapLock;
    SessionMap m_sessionMap;
    
    // 检查会话心跳时间步长
    int m_checkHeartBeatTimeStep;
    // 最少可以camshare的点数
    double m_minCamshareBalance;
    
};
#endif /* LiveChatCamshareManager_h */
